// Model for ABC

initialize() {

  // Use SLiMgui to edit and verify your model with some fixed parameter values
  if (exists("slimgui")){
    setSeed(1234);
    defineConstant("simID",1234);
    defineConstant("N",500);
    defineConstant("MU",1e-8);
    defineConstant("BS",0.05);
    defineConstant("GAMMA_M",-0.03);
    defineConstant("GAMMA_K",0.2);
    defineConstant("G", N*100);
  }

  initializeSLiMOptions(keepPedigrees=T);
	initializeTreeSeq(checkCoalescence=T);

	initializeMutationRate(MU*BS);
	initializeMutationType("m1", 0.5, "g", GAMMA_M, GAMMA_K);

	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 999999);

	initializeRecombinationRate(1e-8);
}
1 {
	sim.addSubpop("p1", N);
	sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
	sim.recalculateFitness();
  sim.rescheduleScriptBlock(s1, start=sim.generation+1);
  sim.rescheduleScriptBlock(s2, start=sim.generation+G, end=sim.generation+G);
}

s1 2: late() {

  inds = p1.individuals;
  uniq_parents = unique(p1.individuals.pedigreeParentIDs);
	gametes = sapply(uniq_parents, "sum(inds.pedigreeParentIDs == applyValue);");

  pop_size = p1.individualCount;
  eff_pop_size = (4*pop_size*(2*pop_size-1))/sum(gametes*(gametes-1));

  if(sim.generation==2){
    p1.setValue("Ne",eff_pop_size);
  }else{
    p1.setValue("Ne",c(p1.getValue("Ne"),eff_pop_size));
  }

	if (sim.treeSeqCoalesced()){
			catn(sim.generation + ": ALL LOCI COALESCED");

      //sim.treeSeqRememberIndividuals(p1.sampleIndividuals(SAMPLE_SIZE));

			mean_Ne = 1/mean(1/p1.getValue("Ne"));
			catn("Harmonic mean Ne = " + mean_Ne);
			theta_1 = 2*N*MU;
			theta_2 = 2*mean_Ne*MU;
			
			writeFile(filePath=paste0("results/params.txt"), contents=paste(simID + " " + getSeed() + " " + N + " " + MU + " " + BS + " " + GAMMA_M + " " + GAMMA_K + " " + theta_1 + " " + theta_2),append = T);

      p1.setSubpopulationSize(SAMPLE_SIZE);

      sim.rescheduleScriptBlock(s3, start=sim.generation+1, end=sim.generation+1);
      sim.rescheduleScriptBlock(s1, start=sim.generation+2, end=sim.generation+2);

	}


}


s2 66666666 late() {
  catn("NO COALESCENCE BY GENERATION: " + sim.generation);
	sim.simulationFinished();
	// Note: if your simulations get to this point you should 1) verify your
	// model and 2) consider either adding a recapitation step or increasing G 
}

s3 99999999 late() {

  //sim.outputFull("results/full_pop_end.txt");
  sim.treeSeqOutput("/tmp/slim_" + simID + ".trees");
	sim.simulationFinished();
}



